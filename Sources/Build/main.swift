import Foundation

print("Generating `./docs/index.html` :-")
try? FileManager.default.removeItem(atPath: "./docs/index.html")
try! FileManager.default.copyItem(atPath: "./Sources/about.html", toPath: "./docs/index.html")
var handle = FileHandle(forWritingAtPath: "./docs/index.html")!
handle.seekToEndOfFile()
handle.write("\n<!-- The following content was automatically generated by https://github.com/marrus-sh/Cuts/ -->\n".data(using: .utf8)!)

func getDirectories (in directory: String) -> [(String, String)] {
	do {
		let paths = try FileManager.default.contentsOfDirectory(atPath: directory)
		var isDirectory: ObjCBool = false
		return paths.sorted().reduce(into: []) {
			if FileManager.default.fileExists(atPath: "\(directory)/\($1)", isDirectory: &isDirectory) && isDirectory.boolValue {
				$0.append(($1, "\(directory)/\($1)"))
			}
		}
	} catch {
		return []
	}
}

func getImages (in directory: String) -> [(String, String)] {
	do {
		let paths = try FileManager.default.contentsOfDirectory(atPath: directory)
		var isDirectory: ObjCBool = false
		return paths.sorted().reduce(into: []) {
			if $1.hasSuffix(".gif") && FileManager.default.fileExists(atPath: "\(directory)/\($1)", isDirectory: &isDirectory) && !isDirectory.boolValue {
				$0.append((String($1.dropLast(4)), "\(directory)/\($1)"))
			}
		}
	} catch {
		return []
	}
}

func handleDirectories (in directory: String, level: Int = 0) {
	for (name, path) in getDirectories(in: directory) {
		print(String(repeating: "| ", count: level + 1) + name + "/")
		handle.write(
			"""
			\(String(repeating: "\t", count: level))<section id="\(name.lowercased())">
			\(String(repeating: "\t", count: level + 1))<h\(level < 4 ? String(level + 2) : "6 aria-level=\(level + 2)")>\(name)</h\(level < 4 ? level + 2 : 6)>

			""".data(using: .utf8)!
		)
		handleImages(
			in: path,
			level: level + 1
		)
		handleDirectories(
			in: path,
			level: level + 1
		)
		handle.write("\(String(repeating: "\t", count: level))</section>\n".data(using: .utf8)!)
	}
}

func handleImages (in directory: String, level: Int = 0) {
	let images = getImages(in: directory)
	guard images.count > 0 else {
		return
	}
	handle.write(
		"""
		\(String(repeating: "\t", count: level))<table>
		\(String(repeating: "\t", count: level + 1))<thead>
		\(String(repeating: "\t", count: level + 2))<tr><th>Image<th>Colour<th>Size<th>Source
		\(String(repeating: "\t", count: level + 1))<tbody>

		""".data(using: .utf8)!
	)
	for (name, path) in images {
		print(String(repeating: "| ", count: level) + "· \(name).gif")
		let imageData = FileHandle(
			forReadingAtPath: path
		)!.readDataToEndOfFile()
		let imageMetadata = String(
			data: FileHandle(
				forReadingAtPath: "\(String(path.dropLast(3)))txt" // drops `gif` and adds `txt`
			)?.readDataToEndOfFile() ?? Data(),
			encoding: .utf8
		) ?? ""
		var colour: String? = nil
		var sourceName: String? = nil
		var sourceURL: String? = nil
		var width: UInt = 0
		var height: UInt = 0
		var alt: String = ""
		for line in imageMetadata.split(separator: "\n") {
			let pair = line.split(separator: ":", maxSplits: 1)
			if pair.count < 2 {
				continue
			}
			switch pair[0].trimmingCharacters(in: .whitespacesAndNewlines) {
			case "colour":
				colour = pair[1].trimmingCharacters(in: .whitespacesAndNewlines)
			case "source":
				sourceName = pair[1].trimmingCharacters(in: .whitespacesAndNewlines)
			case "url":
				sourceURL = pair[1].trimmingCharacters(in: .whitespacesAndNewlines)
			case "width":
				width = UInt(pair[1].trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
			case "height":
				height = UInt(pair[1].trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
			case "alt":
				alt = pair[1].trimmingCharacters(in: .whitespacesAndNewlines)
			default:
				continue
			}
		}
		handle.write(
			"""
			\(String(repeating: "\t", count: level + 2))<tr><!-- `\(name)` -->
			\(String(repeating: "\t", count: level + 3))<td><img\(width > 0 ? " width=\(width)" : "")\(height > 0 ? " height=\(height)" : "") alt="\(alt)" src="data:image/gif;base64,\(imageData.base64EncodedString())">
			\(String(repeating: "\t", count: level + 3))<td>\(colour ?? "")
			\(String(repeating: "\t", count: level + 3))<td>\(width > 0 ? String(width) : "⁇")×\(height > 0 ? String(height) : "⁇")<br><small>\(imageData.count)B</small>
			\(String(repeating: "\t", count: level + 3))<td>\(sourceURL != nil ? "<a href=\(sourceURL!)>" : "")\(sourceName != nil ? "<cite>\(sourceName!)</cite>" : sourceURL ?? "")\(sourceURL != nil ? "</a>" : "")

			""".data(using: .utf8)!
		)
	}
	handle.write("\(String(repeating: "\t", count: level + 1))</table>\n".data(using: .utf8)!)
}

handleDirectories(in: FileManager.default.currentDirectoryPath + "/Sources/Images")
print("-: Done.")
